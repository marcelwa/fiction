name: Coverage CI

on:
  push:
    branches-ignore:
      - master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build_and_test:
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        compiler: [ g++-10 ]

    name: Coverage on ${{matrix.os}} with ${{matrix.compiler}}
    runs-on: ${{matrix.os}}

    steps:
      - name: Install the Compiler
        run: sudo apt-get update && sudo apt-get install -yq ${{matrix.compiler}}

      - name: Clone Repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build

        run: cmake $GITHUB_WORKSPACE -DCMAKE_CXX_COMPILER=${{matrix.compiler}} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_PROGRESS_BARS=OFF -DFICTION_TEST=ON -DWARNINGS_AS_ERRORS=OFF -DENABLE_COVERAGE=ON

#      - name: Cache Z3
#        uses: actions/cache@v2
#        id: cache-z3
#        with:
#          path: ${{github.workspace}}/build/z3
#          key: ${{matrix.os}}_${{matrix.compiler}}

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash

        run: cmake --build . --config $BUILD_TYPE -j2

      - name: Test
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE --verbose

      #    - name: Coverage report
      #      uses: codecov/codecov-action@v1
      #      with:
      #        env_vars: ${{matrix.os}}
      #        verbose: true
      #        gcov_path_exclude: ${{github.workspace}}/libs/

      - name: Setup and run lcov
        run: |
          sudo apt-get install lcov
          lcov -t "result" -o lcov.info -c -d ${{github.workspace}}/build/
          lcov -e lcov.info "${{github.workspace}}/include*" -o lcov_filtered.info
          lcov -l lcov_filtered.info

      - name: Upload report to Codecov
        run: |
          bash <(curl -s https://codecov.io/bash) -f lcov_filtered.info || echo "Codecov did not collect coverage reports"
